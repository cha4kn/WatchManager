/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'java'
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation 'org.xerial:sqlite-jdbc:3.36.0.3'  // SQLite JDBC Driver
    implementation 'org.swinglabs:swingx:1.6.1'  // SwingX for extended Swing functionality (optional)
    implementation 'com.formdev:flatlaf:3.2'
    implementation 'org.mindrot:jbcrypt:0.4'
    implementation 'org.slf4j:slf4j-api:2.0.16'
    implementation 'ch.qos.logback:logback-classic:1.5.16'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'watchdatabase.WatchDataBaseMain'
}

task wipeDbFile {
    doLast {
        def dbFile = file("build/resources/main/watchmanager.db") // Pointing to the file in build/resources
        if (dbFile.exists()) {
            println "Emptying database file: ${dbFile}"
            dbFile.withWriter('UTF-8') { writer ->
                // Simply write nothing to the file, which clears its contents
            }
        } else {
            println "Database file not found, skipping wipe."
        }
    }
}

// Make sure the wipeDbFile task runs after the resources are processed but before the build is finished
processResources.finalizedBy wipeDbFile



tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.register("countLines") {
    var srcDir = "src/main/java"
    var totalLines = 0

    fileTree(srcDir).forEach { file ->
        if (file.name.endsWith(".java")) {
            totalLines += file.readLines().size
        }
    }
    
    println("Total Source Code Lines: $totalLines")
}